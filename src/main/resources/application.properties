test.name=hehe1231231
server.port=8099

#============== kafka ===================
# 指定kafka 代理地址，可以多个
spring.kafka.bootstrap-servers=10.28.18.204:9092,10.28.18.194:9092,10.28.18.120:9092

#=============== provider  =======================

#-1 代表leader 与follower都要同步完毕才算结束
#0  代表producer只要写入到发送缓存池中就代表写入成功
#1  代表leader只要接收到信息就返回成功
#all 与-1相同
spring.kafka.producer.acks=1
#只有当-1 all 1 才会生效
spring.kafka.producer.retries=1
# 每次批量发送消息的数量
spring.kafka.producer.batch-size=16384
# 发送缓冲池大小
spring.kafka.producer.buffer-memory=33554432
# 生产者编号
spring.kafka.producer.client-id=20

# 指定消息key和消息体的编解码方式
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

#=============== consumer  =======================
# 指定默认消费者group id
spring.kafka.consumer.group-id=test1123
#从以前开始消费
spring.kafka.consumer.auto-offset-reset=earliest
#是否自动提交
spring.kafka.consumer.enable-auto-commit=true
#自动提交间隔时间
spring.kafka.consumer.auto-commit-interval=10000
#消费者发送请求时 传递给服务端的标识
spring.kafka.consumer.client-id=10
#如果未满足批量拉取的最小值，等待的时间长短
spring.kafka.consumer.fetch-max-wait=10000
#批量拉取最低的大小 单位:字节
spring.kafka.consumer.fetch-min-size=1000

# 指定消息key和消息体的编解码方式
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
